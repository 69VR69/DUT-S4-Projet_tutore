Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n        xmlns:tools=\"http://schemas.android.com/tools\"\r\n        package=\"fr.iut.orsay.myapplication\">\r\n\r\n    <uses-permission\r\n            android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"\r\n            tools:ignore=\"ScopedStorage\" />\r\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n\r\n    <application\r\n            android:icon=\"@mipmap/ic_launcher\"\r\n            android:label=\"@string/appName\"\r\n            android:roundIcon=\"@drawable/logo\"\r\n            android:supportsRtl=\"true\"\r\n            android:theme=\"@style/Theme.MyApplication\"\r\n            tools:ignore=\"AllowBackup\">\r\n        <activity\r\n                android:name=\".activity.SplashscreenActivity\"\r\n                android:label=\"@string/appName\"\r\n                android:theme=\"@style/Theme.MyApplication.NoActionBar\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n\r\n        <activity\r\n                android:name=\".activity.FilterActivity\"\r\n                android:label=\"Filters\"\r\n                android:theme=\"@style/Theme.MyApplication.NoActionBar\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.SEND\" />\r\n                <category android:name=\"android.intent.category.DEFAULT\" />\r\n            </intent-filter>\r\n        </activity>\r\n\r\n        <activity\r\n                android:name=\".activity.SelectionActivity\"\r\n                android:label=\"@string/SelectionActivity\"\r\n                android:theme=\"@style/Theme.MyApplication.NoActionBar\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.SEND\" />\r\n                <category android:name=\"android.intent.category.DEFAULT\" />\r\n            </intent-filter>\r\n        </activity>\r\n\r\n        <activity\r\n                android:name=\".activity.CurveActivity\"\r\n                android:label=\"@string/CurveActivity\"\r\n                android:theme=\"@style/Theme.MyApplication.NoActionBar\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.VIEW\" />\r\n                <category android:name=\"android.intent.category.DEFAULT\" />\r\n            </intent-filter>\r\n        </activity>\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(revision 3db46ca7d62e3143bdb9a32da27a3a55bfa7f8ef)
+++ app/src/main/AndroidManifest.xml	(date 1624548232651)
@@ -1,12 +1,9 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
         xmlns:tools="http://schemas.android.com/tools"
+        android:requestLegacyExternalStorage="true"
         package="fr.iut.orsay.myapplication">
 
-    <uses-permission
-            android:name="android.permission.WRITE_EXTERNAL_STORAGE"
-            tools:ignore="ScopedStorage" />
-    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
     <uses-permission android:name="android.permission.INTERNET" />
 
     <application
Index: app/src/main/java/fr/iut/orsay/myapplication/activity/FilterActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package fr.iut.orsay.myapplication.activity;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.Intent;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.view.View;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.EditText;\r\nimport android.widget.ListView;\r\nimport android.widget.RadioButton;\r\nimport android.widget.Spinner;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport com.github.mikephil.charting.data.Entry;\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.SQLException;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Locale;\r\nimport java.util.Map;\r\nimport java.util.Objects;\r\nimport java.util.concurrent.CompletableFuture;\r\nimport java.util.concurrent.ExecutionException;\r\n\r\nimport fr.iut.orsay.myapplication.DatabaseTools;\r\nimport fr.iut.orsay.myapplication.Graph;\r\nimport fr.iut.orsay.myapplication.GraphData;\r\nimport fr.iut.orsay.myapplication.ListViewFilter;\r\nimport fr.iut.orsay.myapplication.R;\r\n\r\n@RequiresApi(api = Build.VERSION_CODES.N) public class FilterActivity extends AppCompatActivity implements AdapterView.OnItemSelectedListener, TextWatcher\r\n    {\r\n        private static final String DATABASE_URL = \"jdbc:mariadb://78.116.137.76:3306/pt?user=usr1&password=pt1\";\r\n        \r\n        private PreparedStatement getTypes_ps;\r\n        private PreparedStatement getSensor_ps;\r\n        \r\n        private GraphData graphData;\r\n        private Graph selectedGraph;\r\n        private final BottomNavigationView.OnNavigationItemSelectedListener navListener = item ->\r\n        {\r\n            if (getResources().getString(R.string.menuList).equalsIgnoreCase((String) item.getTitle()))\r\n                {\r\n                    setResult(0, getIntent().putExtra(\"selectedGraph\", selectedGraph));\r\n                    finish();\r\n                }\r\n            else if (getResources().getString(R.string.menuCurve).equalsIgnoreCase((String) item.getTitle()))\r\n                {\r\n                    \r\n                    if (selectedGraph == null)\r\n                        {\r\n                            Toast.makeText(this, getResources().getString(R.string.selected_graph), Toast.LENGTH_SHORT).show();\r\n                            return false;\r\n                        }\r\n                    Intent intent = new Intent(FilterActivity.this, CurveActivity.class);\r\n                    try\r\n                        {\r\n                            for (Map.Entry<String, ArrayList<Entry>> entry : graphData.getData().entrySet())\r\n                                {\r\n                                    selectedGraph.addDataSet(entry.getKey(), entry.getValue());\r\n                                }\r\n                        }\r\n                    catch (SQLException | ExecutionException | InterruptedException throwables)\r\n                        {\r\n                            throwables.printStackTrace();\r\n                        }\r\n                    intent.putExtra(\"selectedGraph\", selectedGraph);\r\n                    startActivity(intent);\r\n                }\r\n            else\r\n                return false;\r\n            return true;\r\n        };\r\n        //android widget\r\n        private Spinner spnSelector;\r\n        private RadioButton radioType;\r\n        private RadioButton radioSensor;\r\n        private ListView dataList;\r\n        private ListView currentData_lv;\r\n        private ListViewFilter listViewFilterAdapterDataList;\r\n        private ListViewFilter listViewFilterAdapterCurrentData;\r\n        private EditText startDateEditText;\r\n        private EditText endDateEditText;\r\n        \r\n        /**\r\n         * check si une string est dans le format demandé\r\n         *\r\n         * @param date\r\n         * @return retourne vrai si la date est dans le format demandé, faux sinon\r\n         */\r\n        public static boolean isValidDate(String date)\r\n            {\r\n                @SuppressLint(\"SimpleDateFormat\") SimpleDateFormat dateFormat = new SimpleDateFormat(\"dd/MM/yyyy\");\r\n                dateFormat.setLenient(false);\r\n                try\r\n                    {\r\n                        dateFormat.parse(date.trim());\r\n                    }\r\n                catch (ParseException e)\r\n                    {\r\n                        return false;\r\n                    }\r\n                return true;\r\n            }\r\n        \r\n        /**\r\n         * charge la page de filtres\r\n         *\r\n         * @param savedInstanceState\r\n         */\r\n        @Override protected void onCreate(Bundle savedInstanceState)\r\n            {\r\n                super.onCreate(savedInstanceState);\r\n                setContentView(R.layout.activity_filter);\r\n                \r\n                //get widgets references\r\n                radioType = findViewById(R.id.radioType);\r\n                radioSensor = findViewById(R.id.radioSensor);\r\n                dataList = findViewById(R.id.lstDataList);\r\n                spnSelector = findViewById(R.id.spnSelector);\r\n                currentData_lv = findViewById(R.id.lstCurrentData);\r\n                startDateEditText = findViewById(R.id.startDate);\r\n                endDateEditText = findViewById(R.id.endDate);\r\n                \r\n                //set listeners\r\n                spnSelector.setOnItemSelectedListener(this);\r\n                startDateEditText.addTextChangedListener(this);\r\n                endDateEditText.addTextChangedListener(this);\r\n                \r\n                selectedGraph = (Graph) getIntent().getSerializableExtra(\"selectedGraph\");\r\n    \r\n                if (selectedGraph.getChart() != null)\r\n                    {\r\n                        ArrayList<String> currentData = selectedGraph.get_curvelbl();\r\n                        ArrayList<ArrayList<String>> splittedCurrentData = new ArrayList<>();\r\n                        for (int i = 0; i < currentData.size(); i++)\r\n                            {\r\n                                String[] line = currentData.get(i).split(\":\");\r\n                                splittedCurrentData.add(new ArrayList<>(Arrays.asList(line[0], line[1])));\r\n                            }\r\n                        graphData.setGraphsData(splittedCurrentData);\r\n            \r\n                        graphData.setEndDate(null);\r\n                        graphData.setStartDate(null);\r\n                        listViewFilterAdapterCurrentData = new ListViewFilter(FilterActivity.this, graphData.getConcatenatedCurrentData());\r\n                        currentData_lv.setAdapter(listViewFilterAdapterCurrentData);\r\n                    }\r\n                \r\n                androidx.appcompat.widget.Toolbar toolbar = findViewById(R.id.toolbar);\r\n                setSupportActionBar(toolbar);\r\n                setToolbarTitle(selectedGraph.getName());\r\n                \r\n                CompletableFuture<Connection> databaseConnecting = CompletableFuture.supplyAsync(() ->\r\n                {\r\n                    try\r\n                        {\r\n                            return DatabaseTools.openConnection(DATABASE_URL);\r\n                        }\r\n                    catch (SQLException | ClassNotFoundException throwables)\r\n                        {\r\n                            throwables.printStackTrace();\r\n                        }\r\n                    return null;\r\n                });\r\n                \r\n                try\r\n                    {\r\n                        graphData = new GraphData(databaseConnecting.get(), FilterActivity.this);\r\n                    }\r\n                catch (SQLException | InterruptedException | ExecutionException throwables)\r\n                    {\r\n                        throwables.printStackTrace();\r\n                    }\r\n                \r\n                getTypes_ps = null;\r\n                getSensor_ps = null;\r\n                try\r\n                    {\r\n                        getTypes_ps = graphData.getConnection().prepareStatement(FilterActivity.this.getString(R.string.get_types_with_specified_sensor));\r\n                        getSensor_ps = graphData.getConnection().prepareStatement(FilterActivity.this.getString(R.string.get_sensors_with_specified_type));\r\n                    }\r\n                catch (SQLException throwables)\r\n                    {\r\n                        throwables.printStackTrace();\r\n                    }\r\n                \r\n                graphData.setGraphsData(new ArrayList<>());\r\n                \r\n                BottomNavigationView bottomNav = findViewById(R.id.bottom_navigation);\r\n                bottomNav.setOnNavigationItemSelectedListener(navListener);\r\n            }\r\n        \r\n        /**\r\n         * est appelé lors d'un click sur l'un des radio buttons : envoie la requete pour obtenir la\r\n         * liste des capteurs ou la liste des types de données\r\n         *\r\n         * @param view\r\n         * @throws SQLException\r\n         * @throws ExecutionException\r\n         * @throws InterruptedException\r\n         */\r\n        @SuppressLint(\"NonConstantResourceId\") public void onRadioButtonClicked(View view) throws SQLException, ExecutionException, InterruptedException\r\n            {\r\n                boolean checked = ((RadioButton) view).isChecked();\r\n                \r\n                switch (view.getId())\r\n                    {\r\n                        case R.id.radioSensor:\r\n                            if (checked)\r\n                                {\r\n                                    ArrayList<String> sensors = DatabaseTools.getSensors(graphData.getConnection(), this.getString(R.string.get_sensors));\r\n                                    ArrayAdapter<String> adapter = new ArrayAdapter<>(FilterActivity.this, R.layout.support_simple_spinner_dropdown_item, sensors);\r\n                                    spnSelector.setAdapter(adapter);\r\n                                }\r\n                            break;\r\n                        case R.id.radioType:\r\n                            if (checked)\r\n                                {\r\n                                    ArrayList<String> types = DatabaseTools.getTypes(graphData.getConnection(), this.getString(R.string.get_types));\r\n                                    ArrayAdapter<String> adapter = new ArrayAdapter<>(FilterActivity.this, R.layout.support_simple_spinner_dropdown_item, types);\r\n                                    spnSelector.setAdapter(adapter);\r\n                                }\r\n                            break;\r\n                    }\r\n            }\r\n        \r\n        /**\r\n         * est appelé lors d'un click sur un élément du spinner : envoie une requête pour récupérer\r\n         * les données correspondant au type de donnée ou au capteur sélectionné\r\n         *\r\n         * @param adapterView\r\n         * @param view\r\n         * @param i\r\n         * @param l\r\n         */\r\n        @Override public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l)\r\n            {\r\n                if (adapterView.getId() == R.id.spnSelector)\r\n                    {\r\n                        if (radioSensor.isChecked())\r\n                            {\r\n                                String sensor = (String) adapterView.getItemAtPosition(i);\r\n                                int numSensor = Integer.parseInt(sensor.substring(0, 1));\r\n                                ArrayList<String> types = null;\r\n                                try\r\n                                    {\r\n                                        types = DatabaseTools.getTypes(numSensor, getTypes_ps);\r\n                                    }\r\n                                catch (SQLException | ExecutionException | InterruptedException throwables)\r\n                                    {\r\n                                        throwables.printStackTrace();\r\n                                    }\r\n                                listViewFilterAdapterDataList = new ListViewFilter(FilterActivity.this, types);\r\n                            }\r\n                        else if (radioType.isChecked())\r\n                            {\r\n                                String type = (String) adapterView.getItemAtPosition(i);\r\n                                int numIPSO = Integer.parseInt(type.substring(0, 1));\r\n                                ArrayList<String> sensors = null;\r\n                                try\r\n                                    {\r\n                                        sensors = DatabaseTools.getSensors(numIPSO, getSensor_ps);\r\n                                    }\r\n                                catch (SQLException | ExecutionException | InterruptedException throwables)\r\n                                    {\r\n                                        throwables.printStackTrace();\r\n                                    }\r\n                                listViewFilterAdapterDataList = new ListViewFilter(FilterActivity.this, sensors);\r\n                            }\r\n                        dataList.setAdapter(listViewFilterAdapterDataList);\r\n                    }\r\n            }\r\n        \r\n        \r\n        @Override public void onNothingSelected(AdapterView<?> adapterView) {}\r\n        \r\n        /**\r\n         * ajoute les données sélectionnées dans la list view \"current data\"\r\n         *\r\n         * @param view\r\n         */\r\n        public void addToCurrentData(View view)\r\n            {\r\n                ArrayList<String> valueToAdd;\r\n                if (radioSensor.isChecked())\r\n                    {\r\n                        ArrayList<String> currentSelectedTypes = listViewFilterAdapterDataList.getSelectedData();\r\n                        for (int i = 0; i < currentSelectedTypes.size(); i++)\r\n                            {\r\n                                valueToAdd = new ArrayList<>(Arrays.asList(spnSelector.getSelectedItem().toString(), currentSelectedTypes.get(i)));\r\n                                ArrayList<ArrayList<String>> currentData = graphData.getGraphsData();\r\n                                if (!currentData.contains(valueToAdd))\r\n                                    {\r\n                                        currentData.add(valueToAdd);\r\n                                        graphData.setGraphsData(currentData);\r\n                                    }\r\n                            }\r\n                    }\r\n                else if (radioType.isChecked())\r\n                    {\r\n                        ArrayList<String> currentSelectedSensors = listViewFilterAdapterDataList.getSelectedData();\r\n                        for (int i = 0; i < currentSelectedSensors.size(); i++)\r\n                            {\r\n                                valueToAdd = new ArrayList<>(Arrays.asList(currentSelectedSensors.get(i), spnSelector.getSelectedItem().toString()));\r\n                                ArrayList<ArrayList<String>> currentData = graphData.getGraphsData();\r\n                                if (!currentData.contains(valueToAdd))\r\n                                    {\r\n                                        currentData.add(valueToAdd);\r\n                                        graphData.setGraphsData(currentData);\r\n                                    }\r\n                            }\r\n                    }\r\n                listViewFilterAdapterCurrentData = new ListViewFilter(FilterActivity.this, graphData.getConcatenatedCurrentData());\r\n                currentData_lv.setAdapter(listViewFilterAdapterCurrentData);\r\n            }\r\n        \r\n        /**\r\n         * supprime les données sélectionnées dans \"current data\"\r\n         *\r\n         * @param view\r\n         */\r\n        public void removeFromCurrentData(View view)\r\n            {\r\n                ArrayList<String> selectedData = listViewFilterAdapterCurrentData.getSelectedData();\r\n                for (int i = 0; i < selectedData.size(); i++)\r\n                    {\r\n                        String[] splitted = selectedData.get(i).split(\":\");\r\n                        ArrayList<ArrayList<String>> currentData = graphData.getGraphsData();\r\n                        currentData.remove(new ArrayList<>(Arrays.asList(splitted[0], splitted[1])));\r\n                        graphData.setGraphsData(currentData);\r\n                    }\r\n                listViewFilterAdapterCurrentData = new ListViewFilter(FilterActivity.this, graphData.getConcatenatedCurrentData());\r\n                currentData_lv.setAdapter(listViewFilterAdapterCurrentData);\r\n            }\r\n        \r\n        @Override public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {}\r\n        \r\n        @Override public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {}\r\n        \r\n        /**\r\n         * récupère dans les chaines de caractère saisies dans les champs de date\r\n         *\r\n         * @param editable\r\n         */\r\n        @Override public void afterTextChanged(Editable editable)\r\n            {\r\n                SimpleDateFormat dateFormat = new SimpleDateFormat(\"dd/MM/yyyy-HH:mm\", Locale.FRANCE);\r\n                if (isValidDate(editable.toString()))\r\n                    {\r\n                        if (startDateEditText.getText() == editable)\r\n                            {\r\n                                try\r\n                                    {\r\n                                        graphData.setStartDate(dateFormat.parse(editable.toString()));\r\n                                    }\r\n                                catch (ParseException e)\r\n                                    {\r\n                                        e.printStackTrace();\r\n                                    }\r\n                            }\r\n                        else if (endDateEditText.getText() == editable)\r\n                            {\r\n                                try\r\n                                    {\r\n                                        graphData.setEndDate(dateFormat.parse(editable.toString()));\r\n                                    }\r\n                                catch (ParseException e)\r\n                                    {\r\n                                        e.printStackTrace();\r\n                                    }\r\n                            }\r\n                    }\r\n            }\r\n        \r\n        \r\n        public void setToolbarTitle(String title)\r\n            {\r\n                Objects.requireNonNull(getSupportActionBar()).setTitle(\"Selected Graph : \" + title);\r\n            }\r\n    }\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/fr/iut/orsay/myapplication/activity/FilterActivity.java	(revision 3db46ca7d62e3143bdb9a32da27a3a55bfa7f8ef)
+++ app/src/main/java/fr/iut/orsay/myapplication/activity/FilterActivity.java	(date 1624546625690)
@@ -20,6 +20,7 @@
 
 import com.github.mikephil.charting.data.Entry;
 import com.google.android.material.bottomnavigation.BottomNavigationView;
+import com.google.gson.Gson;
 
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -48,12 +49,13 @@
         private PreparedStatement getSensor_ps;
         
         private GraphData graphData;
-        private Graph selectedGraph;
+        public static Graph selectedGraph;
         private final BottomNavigationView.OnNavigationItemSelectedListener navListener = item ->
         {
             if (getResources().getString(R.string.menuList).equalsIgnoreCase((String) item.getTitle()))
                 {
-                    setResult(0, getIntent().putExtra("selectedGraph", selectedGraph));
+                    SelectionActivity.selectedGraph = selectedGraph;
+                    //setResult(0, getIntent().putExtra("selectedGraph", new Gson().toJson(selectedGraph)));
                     finish();
                 }
             else if (getResources().getString(R.string.menuCurve).equalsIgnoreCase((String) item.getTitle()))
@@ -64,7 +66,7 @@
                             Toast.makeText(this, getResources().getString(R.string.selected_graph), Toast.LENGTH_SHORT).show();
                             return false;
                         }
-                    Intent intent = new Intent(FilterActivity.this, CurveActivity.class);
+                    Intent chartIntent = new Intent(FilterActivity.this, CurveActivity.class);
                     try
                         {
                             for (Map.Entry<String, ArrayList<Entry>> entry : graphData.getData().entrySet())
@@ -76,8 +78,9 @@
                         {
                             throwables.printStackTrace();
                         }
-                    intent.putExtra("selectedGraph", selectedGraph);
-                    startActivity(intent);
+                    CurveActivity.selectedGraph = selectedGraph;
+                    //chartIntent.putExtra("selectedGraph", new Gson().toJson(selectedGraph));
+                    startActivity(chartIntent);
                 }
             else
                 return false;
@@ -139,7 +142,7 @@
                 startDateEditText.addTextChangedListener(this);
                 endDateEditText.addTextChangedListener(this);
                 
-                selectedGraph = (Graph) getIntent().getSerializableExtra("selectedGraph");
+                //selectedGraph = new Gson().fromJson(getIntent().getStringExtra("selectedGraph"),Graph.class);
     
                 if (selectedGraph.getChart() != null)
                     {
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    id 'com.android.application'\r\n}\r\n\r\nandroid {\r\n    compileSdkVersion 30\r\n\r\n    defaultConfig {\r\n        applicationId \"fr.iut.orsay.myapplication\"\r\n        minSdkVersion 28\r\n        targetSdkVersion 30\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n}\r\n\r\nrepositories {\r\n    maven { url 'https://jitpack.io' }\r\n    jcenter()\r\n}\r\n\r\ndependencies {\r\n    implementation 'androidx.appcompat:appcompat:1.3.0-rc01'\r\n    implementation 'com.google.android.material:material:1.3.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'\r\n    implementation 'androidx.navigation:navigation-fragment:2.3.4'\r\n    implementation 'androidx.navigation:navigation-ui:2.3.4'\r\n    testImplementation 'junit:junit:4.13.2'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.2'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\r\n    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'\r\n    implementation 'org.mariadb.jdbc:mariadb-java-client:2.1.2'\r\n    implementation 'com.opencsv:opencsv:5.4'\r\n    //noinspection GradleCompatible\r\n    implementation 'com.android.support:design:28.0.0'\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision 3db46ca7d62e3143bdb9a32da27a3a55bfa7f8ef)
+++ app/build.gradle	(date 1624555446133)
@@ -44,6 +44,7 @@
     implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
     implementation 'org.mariadb.jdbc:mariadb-java-client:2.1.2'
     implementation 'com.opencsv:opencsv:5.4'
+    implementation 'com.google.code.gson:gson:2.8.4'
     //noinspection GradleCompatible
     implementation 'com.android.support:design:28.0.0'
 }
\ No newline at end of file
Index: app/src/main/java/fr/iut/orsay/myapplication/activity/SelectionActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package fr.iut.orsay.myapplication.activity;\r\n\r\nimport android.Manifest;\r\nimport android.app.AlertDialog;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.text.InputType;\r\nimport android.widget.EditText;\r\nimport android.widget.ListView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.activity.result.ActivityResultLauncher;\r\nimport androidx.activity.result.contract.ActivityResultContracts;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.app.ActivityCompat;\r\n\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView;\r\n\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Objects;\r\n\r\nimport fr.iut.orsay.myapplication.ExportGraph;\r\nimport fr.iut.orsay.myapplication.Graph;\r\nimport fr.iut.orsay.myapplication.ListviewAdapter;\r\nimport fr.iut.orsay.myapplication.R;\r\n\r\npublic class SelectionActivity extends AppCompatActivity\r\n    {\r\n        private Graph selectedGraph;\r\n        private final ActivityResultLauncher<Intent> filterActivityLauncher = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result ->\r\n        {\r\n            assert result.getData() != null;\r\n            this.selectedGraph = (Graph) result.getData().getSerializableExtra(\"selectedGraph\");\r\n            System.out.println(result.getData().getExtras());\r\n        });\r\n        \r\n        private final BottomNavigationView.OnNavigationItemSelectedListener navListener = item ->\r\n        {\r\n            \r\n            \r\n            if (getResources().getString(R.string.menuFilter).equalsIgnoreCase((String) item.getTitle()))\r\n                {\r\n                    if (selectedGraph == null)\r\n                        {\r\n                            Toast.makeText(this, getResources().getString(R.string.selected_graph), Toast.LENGTH_SHORT).show();\r\n                            return false;\r\n                        }\r\n                    \r\n                    Intent filterIntent = new Intent(this, FilterActivity.class);\r\n                    filterIntent.putExtra(\"selectedGraph\", selectedGraph);\r\n                    filterActivityLauncher.launch(filterIntent);\r\n                }\r\n            else if (getResources().getString(R.string.menuCurve).equalsIgnoreCase((String) item.getTitle()))\r\n                {\r\n                    if (selectedGraph == null)\r\n                        {\r\n                            Toast.makeText(this, getResources().getString(R.string.selected_graph), Toast.LENGTH_SHORT).show();\r\n                            return false;\r\n                        }\r\n                    else if (selectedGraph.getChart() == null)\r\n                        {\r\n                            Toast.makeText(this, getResources().getString(R.string.goToFilter), Toast.LENGTH_SHORT).show();\r\n                            return false;\r\n                        }\r\n                    \r\n                    Intent chartIntent = new Intent(this, CurveActivity.class);\r\n                    chartIntent.putExtra(\"selectedGraph\", selectedGraph);\r\n                    startActivity(chartIntent);\r\n                    //chartActivityLauncher.launch(chartIntent);\r\n                }\r\n            else\r\n                return false;\r\n            return true;\r\n        };\r\n        \r\n        @Override protected void onCreate(Bundle savedInstanceState)\r\n            {\r\n                super.onCreate(savedInstanceState);\r\n                setContentView(R.layout.activity_selection);\r\n                \r\n                ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.INTERNET, Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE}, 0);\r\n                \r\n                androidx.appcompat.widget.Toolbar toolbar = findViewById(R.id.toolbar);\r\n                setSupportActionBar(toolbar);\r\n                setToolbarTitle(\"None\");\r\n                \r\n                ListView lstCurve = findViewById(R.id.lstCurve);\r\n                ArrayList<Graph> list = (getIntent().getSerializableExtra(\"graphList\") != null) ? (ArrayList<Graph>) getIntent().getSerializableExtra(\"graphList\") : new ArrayList<>();\r\n                lstCurve.setAdapter(new ListviewAdapter(list, this));\r\n                selectedGraph = (getIntent().getSerializableExtra(\"selectedGraph\") != null) ? (Graph) getIntent().getSerializableExtra(\"selectedGraph\") : ((ListviewAdapter) lstCurve.getAdapter()).getSelectedGraph();\r\n                \r\n                findViewById(R.id.btnCreate).setOnClickListener(view ->\r\n                {\r\n                    AlertDialog.Builder builder = new AlertDialog.Builder(this);\r\n                    builder.setTitle(R.string.modalTextBoxTitle);\r\n                    \r\n                    final EditText input = new EditText(builder.getContext());\r\n                    input.setInputType(InputType.TYPE_CLASS_TEXT);\r\n                    builder.setView(input);\r\n                    \r\n                    builder.setPositiveButton(android.R.string.ok, (dialog, which) ->\r\n                    {\r\n                        dialog.dismiss();\r\n                        selectedGraph = new Graph(input.getText().toString());\r\n                        ((ListviewAdapter) lstCurve.getAdapter()).addGraph(selectedGraph);\r\n                        setToolbarTitle(selectedGraph.getName());\r\n                    });\r\n                    builder.setNegativeButton(android.R.string.cancel, (dialog, which) -> dialog.cancel());\r\n                    \r\n                    builder.show();\r\n                    \r\n                });\r\n                \r\n                findViewById(R.id.btnExportPDF).setOnClickListener(view ->\r\n                {\r\n                    if (selectedGraph == null)\r\n                        {\r\n                            Toast.makeText(this, getResources().getString(R.string.selected_graph), Toast.LENGTH_SHORT).show();\r\n                            return;\r\n                        }\r\n                    else if (selectedGraph.getChart() == null)\r\n                        {\r\n                            Toast.makeText(this, getResources().getString(R.string.goToFilter), Toast.LENGTH_SHORT).show();\r\n                            return;\r\n                        }\r\n                    try\r\n                        {\r\n                            String path = ExportGraph.exportToPDF(selectedGraph.getChart(), \"graph\");\r\n                            Toast.makeText(this, \"File exported at \" + path, Toast.LENGTH_SHORT).show();\r\n                        }\r\n                    catch (IOException e)\r\n                        {\r\n                            e.printStackTrace();\r\n                        }\r\n                });\r\n                \r\n                findViewById(R.id.btnExportPNG).setOnClickListener(view ->\r\n                {\r\n                    if (selectedGraph == null)\r\n                        {\r\n                            Toast.makeText(this, getResources().getString(R.string.selected_graph), Toast.LENGTH_SHORT).show();\r\n                            return;\r\n                        }\r\n                    else if (selectedGraph.getChart() == null)\r\n                        {\r\n                            Toast.makeText(this, getResources().getString(R.string.goToFilter), Toast.LENGTH_SHORT).show();\r\n                            return;\r\n                        }\r\n                    try\r\n                        {\r\n                            String path = ExportGraph.exportToPNG(selectedGraph.getChart(), \"graph\");\r\n                            Toast.makeText(this, \"File exported at \" + path, Toast.LENGTH_SHORT).show();\r\n                        }\r\n                    catch (IOException e)\r\n                        {\r\n                            e.printStackTrace();\r\n                        }\r\n                    \r\n                });\r\n                \r\n                findViewById(R.id.btnExportCSV).setOnClickListener(view ->\r\n                {\r\n                    if (selectedGraph == null)\r\n                        {\r\n                            Toast.makeText(this, getResources().getString(R.string.selected_graph), Toast.LENGTH_SHORT).show();\r\n                            return;\r\n                        }\r\n                    else if (selectedGraph.getChart() == null)\r\n                        {\r\n                            Toast.makeText(this, getResources().getString(R.string.goToFilter), Toast.LENGTH_SHORT).show();\r\n                            return;\r\n                        }\r\n                    try\r\n                        {\r\n                            String path = ExportGraph.exportToCSV(selectedGraph.getChart(), \"graph\");\r\n                            Toast.makeText(this, \"File exported at \" + path, Toast.LENGTH_SHORT).show();\r\n                        }\r\n                    catch (Exception e)\r\n                        {\r\n                            e.printStackTrace();\r\n                        }\r\n                    \r\n                });\r\n                \r\n                ((BottomNavigationView) findViewById(R.id.bottom_navigation)).setOnNavigationItemSelectedListener(navListener);\r\n            }\r\n        \r\n        public void setToolbarTitle(String title)\r\n            {\r\n                Objects.requireNonNull(getSupportActionBar()).setTitle(\"Selected Graph : \" + title);\r\n            }\r\n    }\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/fr/iut/orsay/myapplication/activity/SelectionActivity.java	(revision 3db46ca7d62e3143bdb9a32da27a3a55bfa7f8ef)
+++ app/src/main/java/fr/iut/orsay/myapplication/activity/SelectionActivity.java	(date 1624547858940)
@@ -15,6 +15,7 @@
 import androidx.core.app.ActivityCompat;
 
 import com.google.android.material.bottomnavigation.BottomNavigationView;
+import com.google.gson.Gson;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -27,18 +28,15 @@
 
 public class SelectionActivity extends AppCompatActivity
     {
-        private Graph selectedGraph;
+        public static Graph selectedGraph;
         private final ActivityResultLauncher<Intent> filterActivityLauncher = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result ->
         {
-            assert result.getData() != null;
-            this.selectedGraph = (Graph) result.getData().getSerializableExtra("selectedGraph");
-            System.out.println(result.getData().getExtras());
+            //assert result.getData() != null;
+            //this.selectedGraph = new Gson().fromJson(result.getData().getStringExtra("myjson"), Graph.class);
         });
         
         private final BottomNavigationView.OnNavigationItemSelectedListener navListener = item ->
         {
-            
-            
             if (getResources().getString(R.string.menuFilter).equalsIgnoreCase((String) item.getTitle()))
                 {
                     if (selectedGraph == null)
@@ -48,7 +46,8 @@
                         }
                     
                     Intent filterIntent = new Intent(this, FilterActivity.class);
-                    filterIntent.putExtra("selectedGraph", selectedGraph);
+                    FilterActivity.selectedGraph = selectedGraph;
+                    //filterIntent.putExtra("selectedGraph", new Gson().toJson(selectedGraph));
                     filterActivityLauncher.launch(filterIntent);
                 }
             else if (getResources().getString(R.string.menuCurve).equalsIgnoreCase((String) item.getTitle()))
@@ -65,7 +64,7 @@
                         }
                     
                     Intent chartIntent = new Intent(this, CurveActivity.class);
-                    chartIntent.putExtra("selectedGraph", selectedGraph);
+                    chartIntent.putExtra("selectedGraph", new Gson().toJson(selectedGraph));
                     startActivity(chartIntent);
                     //chartActivityLauncher.launch(chartIntent);
                 }
@@ -86,9 +85,8 @@
                 setToolbarTitle("None");
                 
                 ListView lstCurve = findViewById(R.id.lstCurve);
-                ArrayList<Graph> list = (getIntent().getSerializableExtra("graphList") != null) ? (ArrayList<Graph>) getIntent().getSerializableExtra("graphList") : new ArrayList<>();
-                lstCurve.setAdapter(new ListviewAdapter(list, this));
-                selectedGraph = (getIntent().getSerializableExtra("selectedGraph") != null) ? (Graph) getIntent().getSerializableExtra("selectedGraph") : ((ListviewAdapter) lstCurve.getAdapter()).getSelectedGraph();
+                lstCurve.setAdapter(new ListviewAdapter(new ArrayList<>(), this));
+                //selectedGraph = (getIntent().getSerializableExtra("selectedGraph") != null) ? (Graph) getIntent().getSerializableExtra("selectedGraph") : ((ListviewAdapter) lstCurve.getAdapter()).getSelectedGraph();
                 
                 findViewById(R.id.btnCreate).setOnClickListener(view ->
                 {
@@ -149,6 +147,7 @@
                         }
                     try
                         {
+                            System.out.println(selectedGraph.print());
                             String path = ExportGraph.exportToPNG(selectedGraph.getChart(), "graph");
                             Toast.makeText(this, "File exported at " + path, Toast.LENGTH_SHORT).show();
                         }
Index: app/src/main/java/fr/iut/orsay/myapplication/activity/CurveActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package fr.iut.orsay.myapplication.activity;\r\n\r\nimport android.os.Bundle;\r\nimport android.widget.Button;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView;\r\n\r\nimport java.util.Objects;\r\n\r\nimport fr.iut.orsay.myapplication.Graph;\r\nimport fr.iut.orsay.myapplication.R;\r\n\r\npublic class CurveActivity extends AppCompatActivity\r\n    {\r\n        Graph selectedGraph;\r\n        private final BottomNavigationView.OnNavigationItemSelectedListener navListener = item ->\r\n        {\r\n            System.out.println(item);\r\n            if (getResources().getString(R.string.menuList).equalsIgnoreCase((String) item.getTitle()))\r\n                {\r\n                    finish();\r\n                }\r\n            else if (getResources().getString(R.string.menuFilter).equalsIgnoreCase((String) item.getTitle()))\r\n                {\r\n                    finish();\r\n                }\r\n            else\r\n                return false;\r\n            return true;\r\n        };\r\n        \r\n        @Override protected void onCreate(Bundle savedInstanceState)\r\n            {\r\n                super.onCreate(savedInstanceState);\r\n                setContentView(R.layout.activity_curve);\r\n    \r\n                selectedGraph = (Graph) getIntent().getSerializableExtra(\"selectedGraph\");\r\n                selectedGraph.create_chart(findViewById(R.id.chart), this);\r\n                selectedGraph.show();\r\n                \r\n                androidx.appcompat.widget.Toolbar toolbar = findViewById(R.id.toolbar);\r\n                setSupportActionBar(toolbar);\r\n                setToolbarTitle(selectedGraph.getName());\r\n                \r\n                //Graph test = new Graph(\"graph de test\", 50, 50, 50, 50, this);\r\n                \r\n                Button btnZoomAdd = findViewById(R.id.btnZoomAdd);\r\n                btnZoomAdd.setOnClickListener(view ->\r\n                {\r\n                    System.out.println(\"Zoom IN\");\r\n                    selectedGraph.zoomIn();\r\n                });\r\n                Button btnZoomLess = findViewById(R.id.btnZoomLess);\r\n                btnZoomLess.setOnClickListener(view ->\r\n                {\r\n                    System.out.println(\"Zoom OUT\");\r\n                    selectedGraph.zoomOut();\r\n                });\r\n                \r\n                BottomNavigationView bottomNav = findViewById(R.id.bottom_navigation);\r\n                bottomNav.setOnNavigationItemSelectedListener(navListener);\r\n                \r\n            }\r\n        \r\n        public void setToolbarTitle(String title)\r\n            {\r\n                Objects.requireNonNull(getSupportActionBar()).setTitle(\"Selected Graph : \" + title);\r\n            }\r\n    }
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/fr/iut/orsay/myapplication/activity/CurveActivity.java	(revision 3db46ca7d62e3143bdb9a32da27a3a55bfa7f8ef)
+++ app/src/main/java/fr/iut/orsay/myapplication/activity/CurveActivity.java	(date 1624546565737)
@@ -6,6 +6,7 @@
 import androidx.appcompat.app.AppCompatActivity;
 
 import com.google.android.material.bottomnavigation.BottomNavigationView;
+import com.google.gson.Gson;
 
 import java.util.Objects;
 
@@ -14,7 +15,7 @@
 
 public class CurveActivity extends AppCompatActivity
     {
-        Graph selectedGraph;
+        public static Graph selectedGraph;
         private final BottomNavigationView.OnNavigationItemSelectedListener navListener = item ->
         {
             System.out.println(item);
@@ -36,7 +37,9 @@
                 super.onCreate(savedInstanceState);
                 setContentView(R.layout.activity_curve);
     
-                selectedGraph = (Graph) getIntent().getSerializableExtra("selectedGraph");
+                //System.out.println("koala rouge : " + new Gson().fromJson(getIntent().getStringExtra("selectedGraph"),Graph.class));
+                //selectedGraph = new Gson().fromJson(getIntent().getStringExtra("selectedGraph"),Graph.class);
+                selectedGraph = FilterActivity.selectedGraph;
                 selectedGraph.create_chart(findViewById(R.id.chart), this);
                 selectedGraph.show();
                 
@@ -44,8 +47,6 @@
                 setSupportActionBar(toolbar);
                 setToolbarTitle(selectedGraph.getName());
                 
-                //Graph test = new Graph("graph de test", 50, 50, 50, 50, this);
-                
                 Button btnZoomAdd = findViewById(R.id.btnZoomAdd);
                 btnZoomAdd.setOnClickListener(view ->
                 {
Index: app/src/main/java/fr/iut/orsay/myapplication/Graph.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package fr.iut.orsay.myapplication;\r\n\r\nimport android.content.Context;\r\nimport android.graphics.Color;\r\nimport android.graphics.DashPathEffect;\r\nimport android.view.View;\r\nimport android.widget.TextView;\r\n\r\nimport com.github.mikephil.charting.charts.LineChart;\r\nimport com.github.mikephil.charting.components.Legend;\r\nimport com.github.mikephil.charting.components.LegendEntry;\r\nimport com.github.mikephil.charting.components.XAxis;\r\nimport com.github.mikephil.charting.data.Entry;\r\nimport com.github.mikephil.charting.data.LineData;\r\nimport com.github.mikephil.charting.data.LineDataSet;\r\nimport com.github.mikephil.charting.highlight.Highlight;\r\nimport com.github.mikephil.charting.interfaces.datasets.ILineDataSet;\r\nimport com.github.mikephil.charting.listener.OnChartValueSelectedListener;\r\n\r\nimport java.io.Serializable;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n\r\n//OnChartGestureListener\r\npublic class Graph implements GraphInterface, OnChartValueSelectedListener, Serializable\r\n    {\r\n        \r\n        private static int NUM_ID = 0;\r\n        private final int max_curve = 5;\r\n        private final String popval = \"Point\";\r\n        int height = 0, width = 0, initHeight = 0, initWidth = 0;\r\n        String graphName;\r\n        ArrayList<LineDataSet> dataSets = new ArrayList<>();\r\n        LineChart chart = null;\r\n        private int id;\r\n        private Context context;\r\n        private View view;\r\n        \r\n        \r\n        public Graph(String graphName)\r\n            {\r\n                this.graphName = graphName;\r\n                this.initWidth = width;\r\n                this.initHeight = height;\r\n                id = NUM_ID;\r\n                NUM_ID++;\r\n            }\r\n        \r\n        \r\n        public Graph(String graphName, ArrayList<LineDataSet> dataSets)\r\n            {\r\n                this.graphName = graphName;\r\n                this.initWidth = width;\r\n                this.initHeight = height;\r\n                id = NUM_ID;\r\n                NUM_ID++;\r\n                \r\n                \r\n                this.dataSets = dataSets;\r\n                \r\n                this.chart = null;\r\n                \r\n            }\r\n        \r\n        public void create_chart(View view, Context context)\r\n            {//creer le cadre et initialiser les valeur du cadre\r\n                \r\n                this.context = context;\r\n                this.view = view;\r\n                \r\n                LineChart new_chart = (LineChart) view;\r\n                \r\n                new_chart.setDrawBorders(true); //encadre la graph\r\n                new_chart.setPinchZoom(true);\r\n                new_chart.setTouchEnabled(true);\r\n                \r\n                new_chart.setNoDataText(\"Chart loading, please wait\");\r\n                //new_chart.getDescription().setEnabled(false);\r\n                \r\n                new_chart.getXAxis().setDrawLabels(false);\r\n                \r\n                new_chart.getDescription().setText(\"\");\r\n                new_chart.getDescription().setTextSize(15f);\r\n                \r\n                \r\n                new_chart.setDragDecelerationEnabled(false);\r\n                \r\n                // Formatter to adjust epoch time to readable date\r\n                //new_chart.getXAxis().setValueFormatter(new LineChartXAxisValueFormatter());\r\n                \r\n                \r\n                XAxis xAxis = new_chart.getXAxis();\r\n                xAxis.setValueFormatter(new DateValueFormatter());\r\n                \r\n                //new_chart.getLegend().setOrientation(45);\r\n                \r\n                this.chart = new_chart;\r\n                return;\r\n            }\r\n        \r\n        /**\r\n         * is use to set a color for each curve\r\n         *\r\n         * @param set Linedatadet to be modified\r\n         * @param i   his index in the chart\r\n         * @return the Linedataset with the correct color\r\n         */\r\n        private LineDataSet set_curve_color(LineDataSet set, int i)\r\n            {\r\n                switch (i)\r\n                    {\r\n                        case 0:\r\n                            set.setCircleColor(Color.BLUE);\r\n                            set.setColor(Color.BLUE);\r\n                            return set;\r\n                        case 1:\r\n                            set.setCircleColor(Color.RED);\r\n                            set.setColor(Color.RED);\r\n                            return set;\r\n                        case 2:\r\n                            set.setCircleColor(Color.MAGENTA);\r\n                            set.setColor(Color.MAGENTA);\r\n                            return set;\r\n                        case 3:\r\n                            set.setCircleColor(Color.GREEN);\r\n                            set.setColor(Color.GREEN);\r\n                            return set;\r\n                        default:\r\n                            System.out.println(\"test couleur \" + i);\r\n                            set.setCircleColor(Color.BLACK);\r\n                            set.setColor(Color.BLACK);\r\n                            return set;\r\n                        \r\n                    }\r\n            }\r\n        \r\n        \r\n        /**\r\n         * methode pour la representation graphique de la courbe\r\n         *\r\n         * @param set la courbe a formatter\r\n         * @return la courbe correctement formatter\r\n         */\r\n        private LineDataSet formatting_dataset(LineDataSet set)\r\n            {\r\n                \r\n                set.setDrawIcons(false);\r\n                set.setLineWidth(1f);\r\n                set.setCircleRadius(3f);\r\n                set.setDrawCircleHole(false);\r\n                set.setDrawFilled(false);\r\n                set.setFormLineWidth(1f);\r\n                set.setFormLineDashEffect(new DashPathEffect(new float[]{10f, 5f}, 0f));\r\n                set.setFormSize(15.f);\r\n                set.setDrawValues(false);\r\n                \r\n                return set;\r\n            }\r\n        \r\n        \r\n        @Override\r\n        /**\r\n         * utiliser pour ajouter la courbe au graph\r\n         */ public void addDataSet(String label, ArrayList<Entry> dataSet)\r\n            {\r\n                if (dataSets.size() >= max_curve)\r\n                    { //on a limiter la courbe\r\n                        System.out.println(\"max number of data set for \" + graphName + \" (max is 4)\");\r\n                        return;\r\n                    }\r\n                \r\n                \r\n                dataSets.add(formatting_dataset(new LineDataSet(dataSet, label)));\r\n                \r\n                return;\r\n            }\r\n        \r\n        @Override\r\n        /**\r\n         * utiliser pour retirer la courbe du graph\r\n         */ public void removeDataSet(String label)\r\n            {\r\n                \r\n                for (int i = 0; i < dataSets.size(); i++)\r\n                    {\r\n                        if (dataSets.get(i).getLabel() == label)\r\n                            { //on cherche par rapport au label\r\n                                dataSets.remove(i);\r\n                                return;\r\n                            }\r\n                    }\r\n                \r\n                return;\r\n            }\r\n        \r\n        \r\n        /**\r\n         * pour recuperer la courbe a partir du nom\r\n         *\r\n         * @param label le nom de la courbe\r\n         * @return\r\n         */\r\n        public LineDataSet getDataSet(String label)\r\n            {\r\n                for (int i = 0; i < dataSets.size(); i++)\r\n                    { //pas de recherche avencer car on aurais au max 4 courbes\r\n                        if (dataSets.get(i).getLabel() == label)\r\n                            { //on cherche par rapport au label\r\n                                return dataSets.get(i);\r\n                            }\r\n                    }\r\n                \r\n                return null;\r\n                \r\n            }\r\n        \r\n        \r\n        @Override\r\n        /**\r\n         * affiche la courbe avec chaque courbe\r\n         */ public void show()\r\n            {\r\n                \r\n                if (dataSets.size() == 0)\r\n                    {\r\n                        return;\r\n                    }\r\n                \r\n                ArrayList<ILineDataSet> dataSe = new ArrayList<>();\r\n                for (int i = 0; i < dataSets.size(); i++)\r\n                    {\r\n                        if (dataSets.get(i).getLabel() != \"Point\")\r\n                            {\r\n                                dataSets.set(i, set_curve_color(dataSets.get(i), i));\r\n                            }\r\n                        \r\n                        dataSe.add(dataSets.get(i));\r\n                    }\r\n                \r\n                LineData data = new LineData(dataSe);\r\n                chart.setOnChartValueSelectedListener(this);\r\n                \r\n                chart.setData(data);\r\n                generate_legend();\r\n                \r\n                return;\r\n                \r\n            }\r\n        \r\n        @Override\r\n        /**\r\n         * affiche une unique courbe\r\n         */ public void showDataSet(String label)\r\n            {\r\n                ArrayList<ILineDataSet> dataSe = new ArrayList<>();\r\n                for (int i = 0; i < dataSets.size(); i++)\r\n                    {\r\n                        if (dataSets.get(i).getLabel() == label)\r\n                            {\r\n                                dataSe.add(dataSets.get(i));\r\n                            }\r\n                        \r\n                    }\r\n                \r\n                LineData data = new LineData(dataSe);\r\n                \r\n                chart.setData(data);\r\n                \r\n                \r\n                return;\r\n            }\r\n        \r\n        @Override\r\n        /**\r\n         * zoomer dans le graph\r\n         */ public void zoomIn()\r\n            {\r\n                float xValue = chart.getViewPortHandler().getContentCenter().x;\r\n                float yValue = chart.getViewPortHandler().getContentCenter().y;\r\n                \r\n                chart.zoom((float) 1.2, (float) 1.2, xValue, yValue);\r\n            }\r\n        \r\n        @Override\r\n        /**\r\n         *  zoomer dans le graph\r\n         */ public void zoomIn(int scale)\r\n            {\r\n                float xValue = chart.getViewPortHandler().getContentCenter().x;\r\n                float yValue = chart.getViewPortHandler().getContentCenter().y;\r\n                chart.zoom((float) 1 + Math.abs(scale), (float) 1 + Math.abs(scale), xValue, yValue);\r\n            }\r\n        \r\n        @Override\r\n        /**\r\n         *  zoomer dans le graph\r\n         */ public void zoomIn(int scaleW, int scaleH)\r\n            {\r\n                float xValue = chart.getViewPortHandler().getContentCenter().x;\r\n                float yValue = chart.getViewPortHandler().getContentCenter().y;\r\n                chart.zoom((float) 1 + Math.abs(scaleW), (float) 1 + Math.abs(scaleH), xValue, yValue);\r\n                \r\n            }\r\n        \r\n        @Override\r\n        /**\r\n         *  zoomer dans le graph\r\n         */ public void zoomOut()\r\n            {\r\n                float xValue = chart.getViewPortHandler().getContentCenter().x;\r\n                float yValue = chart.getViewPortHandler().getContentCenter().y;\r\n                chart.zoom((float) .8, (float) .8, xValue, yValue);\r\n                \r\n            }\r\n        \r\n        @Override\r\n        /**\r\n         *  zoomer dans le graph\r\n         */ public void zoomOut(int scale)\r\n            {\r\n                float xValue = chart.getViewPortHandler().getContentCenter().x;\r\n                float yValue = chart.getViewPortHandler().getContentCenter().y;\r\n                chart.zoom((float) 1 - Math.abs(scale), (float) 1 - Math.abs(scale), xValue, yValue);\r\n            }\r\n        \r\n        @Override\r\n        /**\r\n         *  zoomer dans le graph\r\n         */ public void zoomOut(int scaleW, int scaleH)\r\n            {\r\n                float xValue = chart.getViewPortHandler().getContentCenter().x;\r\n                float yValue = chart.getViewPortHandler().getContentCenter().y;\r\n                chart.zoom((float) 1 - Math.abs(scaleW), (float) 1 - Math.abs(scaleH), xValue, yValue);\r\n            }\r\n        \r\n        @Override\r\n        /**\r\n         *  zoomer dans le graph\r\n         */ public void rename(String newLabel)\r\n            {\r\n                this.graphName = newLabel;\r\n                return;\r\n            }\r\n        \r\n        \r\n        @Override\r\n        /**\r\n         * affiche les donner du graph dans la console (debug)\r\n         */ public String print()\r\n            {\r\n                StringBuilder out = new StringBuilder();\r\n                \r\n                out.append(\"Data form graph \").append(graphName).append(\"\\n\");\r\n                \r\n                for (int i = 0; i < dataSets.size(); i++)\r\n                    {\r\n                        out.append(printer(dataSets.get(i)));\r\n                        out.append(\"...\\n\");\r\n                    }\r\n                \r\n                out.append(\"--------------------------------\");\r\n                \r\n                return out.toString();\r\n            }\r\n        \r\n        \r\n        @Override\r\n        /**\r\n         * affiche les valeure d'une courbe, en fonction du nom, dans la console  (debug)\r\n         */ public String printDataSet(String label)\r\n            {\r\n                StringBuilder out = new StringBuilder();\r\n                boolean found = false;\r\n                \r\n                for (int i = 0; i < dataSets.size(); i++)\r\n                    { //pas de recherche avencer car on aurais au max 4 courbes\r\n                        if (dataSets.get(i).getLabel().equalsIgnoreCase(label))\r\n                            { //on cherche par rapport au label\r\n                                out.append(printer(dataSets.get(i)));\r\n                                found = true;\r\n                            }\r\n                    }\r\n                \r\n                if (!found)\r\n                    {\r\n                        out.append(\"No data set found for the search :\").append(label).append(\"\\n\");\r\n                    }\r\n                \r\n                out.append(\"--------------------------------\");\r\n                return out.toString();\r\n            }\r\n        \r\n        /**\r\n         * transform les donnees en string\r\n         *\r\n         * @param data les donnée a transformer\r\n         * @return\r\n         */\r\n        private String printer(ILineDataSet data)\r\n            {\r\n                StringBuilder out = new StringBuilder();\r\n                \r\n                out.append(\"Data set : \").append(data.getLabel()).append(\"\\n\");\r\n                \r\n                for (int i = 0; i < data.getEntryCount(); i++)\r\n                    {\r\n                        Entry temp = data.getEntryForIndex(i);\r\n                        \r\n                        out.append(\"\\t - x :\").append(temp.getX()).append(\"\\t y :\").append(temp.getY()).append(\"\\n\");\r\n                    }\r\n                \r\n                return out.toString();\r\n            }\r\n        \r\n        \r\n        //OnChartValueSelectedListener\r\n        \r\n        @Override\r\n        /**\r\n         * ecouter pour la popup\r\n         */ public void onValueSelected(Entry e, Highlight h)\r\n            {\r\n                float f = e.getY();\r\n                System.out.println(f);\r\n                \r\n                for (int i = 0; i < dataSets.size(); i++)\r\n                    {\r\n                        //on recupere la courbe selectionner\r\n                        if (i == h.getDataSetIndex())\r\n                            {\r\n                                LineDataSet sel = dataSets.get(i);\r\n                                popup(e, sel);\r\n                                setStats(sel);\r\n                                \r\n                                //call stat(sel)\r\n                                \r\n                                return;\r\n                            }\r\n                    }\r\n                \r\n                return;\r\n            }\r\n        \r\n        @Override\r\n        /**\r\n         * ecouteur, en cas de reclick sur le meme point\r\n         */ public void onNothingSelected()\r\n            {\r\n                removepopval();\r\n                clearStats();\r\n                \r\n                //TODO mettre le truc de clear les states\r\n            }\r\n        \r\n        \r\n        private void removepopval()\r\n            {\r\n                removeDataSet(popval);\r\n                chart.getDescription().setText(\"\");\r\n                \r\n                show();\r\n                \r\n                return;\r\n                \r\n            }\r\n        \r\n        \r\n        private void popup(Entry e, LineDataSet h)\r\n            {\r\n                \r\n                \r\n                removeDataSet(popval);\r\n                \r\n                ArrayList<Entry> val = new ArrayList<>();\r\n                val.add(e.copy());\r\n                \r\n                LineDataSet point = new LineDataSet(val, popval);\r\n                point.setDrawIcons(false);\r\n                point.setColor(h.getColor());\r\n                point.setCircleColor(h.getColor());\r\n                point.setLineWidth(1f);\r\n                point.setCircleRadius(6f);\r\n                point.setDrawCircleHole(false);\r\n                point.setValueTextSize(15f);\r\n                point.setDrawFilled(false);\r\n                point.setFormLineWidth(1f);\r\n                point.setFormLineDashEffect(new DashPathEffect(new float[]{10f, 5f}, 0f));\r\n                point.setFormSize(15.f);\r\n                point.setDrawValues(true);\r\n                \r\n                \r\n                dataSets.add(point);\r\n                \r\n                DateValueFormatter format = new DateValueFormatter();\r\n                chart.getDescription().setText(format.getFormattedValue(e.getX()));\r\n                show();\r\n                \r\n                return;\r\n                \r\n            }\r\n        \r\n        \r\n        private void generate_legend()\r\n            {\r\n                ArrayList<LegendEntry> legend = new ArrayList<>();\r\n                \r\n                for (int i = 0; i < dataSets.size(); i++)\r\n                    {\r\n                        //on recupere la courbe selectionner\r\n                        if (!dataSets.get(i).getLabel().equalsIgnoreCase(popval))\r\n                            {\r\n                                legend.add(new LegendEntry(dataSets.get(i).getLabel(), Legend.LegendForm.DEFAULT, Float.NaN, Float.NaN, null, dataSets.get(i).getColor()));\r\n                            }\r\n                    }\r\n                \r\n                chart.getLegend().setCustom(legend);\r\n                \r\n            }\r\n        \r\n        \r\n        public int getId()\r\n            {\r\n                return id;\r\n            }\r\n        \r\n        public String getName()\r\n            {\r\n                return graphName;\r\n            }\r\n        \r\n        public void setName(String graphName)\r\n            {\r\n                this.graphName = graphName;\r\n            }\r\n        \r\n        public LineChart getChart()\r\n            {\r\n                return chart;\r\n            }\r\n        \r\n        \r\n        public float get_startdate()\r\n            {\r\n                return (float) chart.getXChartMin();\r\n            }\r\n        \r\n        public float get_enddate()\r\n            {\r\n                return (float) chart.getXChartMax();\r\n            }\r\n        \r\n        \r\n        public ArrayList<String> get_curvelbl()\r\n            {\r\n                ArrayList<String> labels = new ArrayList<>();\r\n                \r\n                for (int i = 0; i < dataSets.size(); i++)\r\n                    {\r\n                        labels.add(dataSets.get(i).getLabel());\r\n                    }\r\n                return labels;\r\n            }\r\n        \r\n        public void setStats(LineDataSet data)\r\n            {\r\n                View t = (View) view.getParent();\r\n                TextView txtMin = (TextView) t.findViewById(R.id.txtMinValue);\r\n                TextView txtMax = (TextView) t.findViewById(R.id.txtMaxValue);\r\n                TextView txtMoy = (TextView) t.findViewById(R.id.txtMean);\r\n                TextView txtEcartType = (TextView) t.findViewById(R.id.txtDeviation);\r\n                \r\n                txtMin.setText(String.format(\"%.2f\", data.getYMin()));\r\n                txtMax.setText(String.format(\"%.2f\", data.getYMax()));\r\n                \r\n                List<Entry> values = data.getValues();\r\n                System.out.println(\"----------------\");\r\n                for (Entry i : values)\r\n                    {\r\n                        System.out.print(i.getY() + \" - \");\r\n                    }\r\n                System.out.println(\"----------------\");\r\n                \r\n                float moy = 0;\r\n                for (Entry d : values)\r\n                    {\r\n                        moy += d.getY();\r\n                    }\r\n                moy = moy / data.getEntryCount();\r\n                txtMoy.setText(String.format(\"%.2f\", moy));\r\n                \r\n                float ecartType = 0;\r\n                for (Entry d : values)\r\n                    {\r\n                        ecartType += (d.getY() - moy) * (d.getY() - moy);\r\n                    }\r\n                ecartType = ecartType / (data.getEntryCount() - 1);\r\n                txtEcartType.setText(String.format(\"%.2f\", Math.sqrt(ecartType)));\r\n            }\r\n        \r\n        public void clearStats()\r\n            {\r\n                View t = (View) view.getParent();\r\n                TextView txtMin = t.findViewById(R.id.txtMinValue);\r\n                TextView txtMax = t.findViewById(R.id.txtMaxValue);\r\n                TextView txtMoy = t.findViewById(R.id.txtMean);\r\n                TextView txtEcartType = t.findViewById(R.id.txtDeviation);\r\n                \r\n                txtMax.setText(\"\");\r\n                txtMin.setText(\"\");\r\n                txtMoy.setText(\"\");\r\n                txtEcartType.setText(\"\");\r\n            }\r\n    }\r\n    \r\n    \r\n   \r\n    \r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/fr/iut/orsay/myapplication/Graph.java	(revision 3db46ca7d62e3143bdb9a32da27a3a55bfa7f8ef)
+++ app/src/main/java/fr/iut/orsay/myapplication/Graph.java	(date 1624545414462)
@@ -13,7 +13,9 @@
 import com.github.mikephil.charting.data.Entry;
 import com.github.mikephil.charting.data.LineData;
 import com.github.mikephil.charting.data.LineDataSet;
+import com.github.mikephil.charting.formatter.IFillFormatter;
 import com.github.mikephil.charting.highlight.Highlight;
+import com.github.mikephil.charting.interfaces.dataprovider.LineDataProvider;
 import com.github.mikephil.charting.interfaces.datasets.ILineDataSet;
 import com.github.mikephil.charting.listener.OnChartValueSelectedListener;
 
@@ -145,11 +147,9 @@
         private LineDataSet formatting_dataset(LineDataSet set)
             {
                 
-                set.setDrawIcons(false);
                 set.setLineWidth(1f);
                 set.setCircleRadius(3f);
                 set.setDrawCircleHole(false);
-                set.setDrawFilled(false);
                 set.setFormLineWidth(1f);
                 set.setFormLineDashEffect(new DashPathEffect(new float[]{10f, 5f}, 0f));
                 set.setFormSize(15.f);
